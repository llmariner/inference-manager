{"$schema":"http://json-schema.org/draft-07/schema#","$ref":"#/$defs/helm-values","$defs":{"helm-values":{"type":"object","properties":{"adminPort":{"$ref":"#/$defs/helm-values.adminPort"},"affinity":{"$ref":"#/$defs/helm-values.affinity"},"certificate":{"$ref":"#/$defs/helm-values.certificate"},"enable":{"$ref":"#/$defs/helm-values.enable"},"enablePrometheusRule":{"$ref":"#/$defs/helm-values.enablePrometheusRule"},"enableServiceMonitor":{"$ref":"#/$defs/helm-values.enableServiceMonitor"},"fullnameOverride":{"$ref":"#/$defs/helm-values.fullnameOverride"},"global":{"$ref":"#/$defs/helm-values.global"},"gracefulShutdownDelay":{"$ref":"#/$defs/helm-values.gracefulShutdownDelay"},"gracefulShutdownTimeout":{"$ref":"#/$defs/helm-values.gracefulShutdownTimeout"},"grpcPort":{"$ref":"#/$defs/helm-values.grpcPort"},"httpPort":{"$ref":"#/$defs/helm-values.httpPort"},"image":{"$ref":"#/$defs/helm-values.image"},"internalGrpcPort":{"$ref":"#/$defs/helm-values.internalGrpcPort"},"kubernetesManager":{"$ref":"#/$defs/helm-values.kubernetesManager"},"livenessProbe":{"$ref":"#/$defs/helm-values.livenessProbe"},"logLevel":{"$ref":"#/$defs/helm-values.logLevel"},"managementGrpcPort":{"$ref":"#/$defs/helm-values.managementGrpcPort"},"managementPort":{"$ref":"#/$defs/helm-values.managementPort"},"modelManagerServerAddr":{"$ref":"#/$defs/helm-values.modelManagerServerAddr"},"monitoringPort":{"$ref":"#/$defs/helm-values.monitoringPort"},"nameOverride":{"$ref":"#/$defs/helm-values.nameOverride"},"nodeSelector":{"$ref":"#/$defs/helm-values.nodeSelector"},"podAnnotations":{"$ref":"#/$defs/helm-values.podAnnotations"},"podSecurityContext":{"$ref":"#/$defs/helm-values.podSecurityContext"},"rateLimit":{"$ref":"#/$defs/helm-values.rateLimit"},"replicaCount":{"$ref":"#/$defs/helm-values.replicaCount"},"requestRouting":{"$ref":"#/$defs/helm-values.requestRouting"},"resources":{"$ref":"#/$defs/helm-values.resources"},"securityContext":{"$ref":"#/$defs/helm-values.securityContext"},"service":{"$ref":"#/$defs/helm-values.service"},"serviceAccount":{"$ref":"#/$defs/helm-values.serviceAccount"},"terminationGracePeriodSeconds":{"$ref":"#/$defs/helm-values.terminationGracePeriodSeconds"},"tolerations":{"$ref":"#/$defs/helm-values.tolerations"},"vectorStoreManagerInternalServerAddr":{"$ref":"#/$defs/helm-values.vectorStoreManagerInternalServerAddr"},"vectorStoreManagerServerAddr":{"$ref":"#/$defs/helm-values.vectorStoreManagerServerAddr"},"version":{"$ref":"#/$defs/helm-values.version"},"volumeMounts":{"$ref":"#/$defs/helm-values.volumeMounts"},"volumes":{"$ref":"#/$defs/helm-values.volumes"},"workerServiceGrpcPort":{"$ref":"#/$defs/helm-values.workerServiceGrpcPort"},"workerServiceGrpcService":{"$ref":"#/$defs/helm-values.workerServiceGrpcService"},"workerServiceTls":{"$ref":"#/$defs/helm-values.workerServiceTls"}},"additionalProperties":false},"helm-values.adminPort":{"description":"The HTTP port number for the admin service.","type":"number","default":8085},"helm-values.affinity":{"description":"A Kubernetes Affinity, if required.\nFor more information, see [Assigning Pods to Nodes](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node).\n\nFor example:\naffinity:\n  nodeAffinity:\n   requiredDuringSchedulingIgnoredDuringExecution:\n     nodeSelectorTerms:\n     - matchExpressions:\n       - key: foo.bar.com/role\n         operator: In\n         values:\n         - master","type":"object"},"helm-values.certificate":{"type":"object","properties":{"create":{"$ref":"#/$defs/helm-values.certificate.create"},"dnsNames":{"$ref":"#/$defs/helm-values.certificate.dnsNames"},"issuerRef":{"$ref":"#/$defs/helm-values.certificate.issuerRef"},"name":{"$ref":"#/$defs/helm-values.certificate.name"}},"additionalProperties":false},"helm-values.certificate.create":{"description":"If enabled, the Certificate resource is created.","type":"boolean","default":false},"helm-values.certificate.dnsNames":{"description":"At least one of commonName (possibly through literalSubject), dnsNames, uris, emailAddresses, ipAddresses or otherNames is required.","type":"array","items":{}},"helm-values.certificate.issuerRef":{"type":"object","properties":{"kind":{"$ref":"#/$defs/helm-values.certificate.issuerRef.kind"},"name":{"$ref":"#/$defs/helm-values.certificate.issuerRef.name"}},"additionalProperties":false},"helm-values.certificate.issuerRef.kind":{"description":"We can reference ClusterIssuers by changing the kind here. The default value is Issuer (i.e. a locally namespaced Issuer)","type":"string","default":"ClusterIssuer"},"helm-values.certificate.issuerRef.name":{"description":"The identifier of the issuer.","type":"string"},"helm-values.certificate.name":{"description":"The Certificate name.","type":"string","default":"session-tls"},"helm-values.enable":{"description":"This field can be used as a condition when using it as a dependency. This definition is only here as a placeholder such that it is included in the json schema.","type":"boolean"},"helm-values.enablePrometheusRule":{"description":"If enabled, a `PrometheusRule` resource is created, which is used to define a alert rule for the Prometheus. NOTE: To use this feature, prometheus-operator must be installed in advance.","type":"boolean","default":false},"helm-values.enableServiceMonitor":{"description":"If enabled, a `ServiceMonitor` resource is created, which is used to define a scrape target for the Prometheus. NOTE: To use this feature, prometheus-operator must be installed in advance.","type":"boolean","default":false},"helm-values.fullnameOverride":{"description":"Override the \"inference-manager-server.fullname\" value. This value is used as part of most of the names of the resources created by this Helm chart.","type":"string"},"helm-values.global":{"description":"Global values shared across all (sub)charts","type":"object","properties":{"auth":{"$ref":"#/$defs/helm-values.global.auth"},"ingress":{"$ref":"#/$defs/helm-values.global.ingress"},"usageSender":{"$ref":"#/$defs/helm-values.global.usageSender"},"workerServiceGrpcService":{"$ref":"#/$defs/helm-values.global.workerServiceGrpcService"}}},"helm-values.global.auth":{"type":"object","properties":{"enable":{"$ref":"#/$defs/helm-values.global.auth.enable"},"rbacInternalServerAddr":{"$ref":"#/$defs/helm-values.global.auth.rbacInternalServerAddr"}}},"helm-values.global.auth.enable":{"description":"The flag to enable auth.","type":"boolean","default":true},"helm-values.global.auth.rbacInternalServerAddr":{"description":"The address for the rbac-server to use API auth.","type":"string","default":"rbac-server-internal-grpc:8082"},"helm-values.global.ingress":{"type":"object","properties":{"annotations":{"$ref":"#/$defs/helm-values.global.ingress.annotations"},"ingressClassName":{"$ref":"#/$defs/helm-values.global.ingress.ingressClassName"},"tls":{"$ref":"#/$defs/helm-values.global.ingress.tls"}}},"helm-values.global.ingress.annotations":{"description":"Optional additional annotations to add to the Ingress.","type":"object"},"helm-values.global.ingress.ingressClassName":{"description":"The Ingress class name.","type":"string","default":"kong"},"helm-values.global.ingress.tls":{"description":"If specified, the API accessed via Ingress will be enabled for TLS. For more information, see [Enable TLS](https://llmariner.ai/docs/setup/install/single_cluster_production/#optional-enable-tls).\n\nFor example:\ntls:\n  hosts:\n  - api.llm.mydomain.com\n  secretName: api-tls","type":"object"},"helm-values.global.usageSender":{"description":"Settings for sending usage data to the usage API server.","type":"object","default":{"apiUsageInternalServerAddr":"api-usage-server-internal-grpc:8082","enable":true}},"helm-values.global.workerServiceGrpcService":{"type":"object","properties":{"annotations":{"$ref":"#/$defs/helm-values.global.workerServiceGrpcService.annotations"}}},"helm-values.global.workerServiceGrpcService.annotations":{"description":"Optional additional annotations to add to Service of the inference-manager-server worker service.","type":"object","default":{}},"helm-values.gracefulShutdownDelay":{"description":"Delay before shutting down the server.","type":"string","default":"0s"},"helm-values.gracefulShutdownTimeout":{"description":"The duration given to runnable to stop before the manager actually returns on stop. If not specified, manager timeouts in 30 seconds.","type":"string"},"helm-values.grpcPort":{"description":"The GRPC port number for the public service.","type":"number","default":8081},"helm-values.httpPort":{"description":"The HTTP port number for the public service.","type":"number","default":8080},"helm-values.image":{"type":"object","properties":{"pullPolicy":{"$ref":"#/$defs/helm-values.image.pullPolicy"},"repository":{"$ref":"#/$defs/helm-values.image.repository"}},"additionalProperties":false},"helm-values.image.pullPolicy":{"description":"Kubernetes imagePullPolicy on Deployment.","type":"string","default":"IfNotPresent"},"helm-values.image.repository":{"description":"The container image name.","type":"string","default":"public.ecr.aws/cloudnatix/llmariner/inference-manager-server"},"helm-values.internalGrpcPort":{"description":"The GRPC port number for the internal service.","type":"number","default":8083},"helm-values.kubernetesManager":{"type":"object","properties":{"enableLeaderElection":{"$ref":"#/$defs/helm-values.kubernetesManager.enableLeaderElection"},"healthBindAddress":{"$ref":"#/$defs/helm-values.kubernetesManager.healthBindAddress"},"metricsBindAddress":{"$ref":"#/$defs/helm-values.kubernetesManager.metricsBindAddress"},"pprofBindAddress":{"$ref":"#/$defs/helm-values.kubernetesManager.pprofBindAddress"}},"additionalProperties":false},"helm-values.kubernetesManager.enableLeaderElection":{"description":"Specify whether to enable the leader election.","type":"boolean","default":false},"helm-values.kubernetesManager.healthBindAddress":{"description":"The bind address for the health probe serving.","type":"string"},"helm-values.kubernetesManager.metricsBindAddress":{"description":"The bind address for the metrics serving.","type":"string","default":":8086"},"helm-values.kubernetesManager.pprofBindAddress":{"description":"The bind address for the pprof serving.","type":"string"},"helm-values.livenessProbe":{"type":"object","properties":{"enabled":{"$ref":"#/$defs/helm-values.livenessProbe.enabled"},"failureThreshold":{"$ref":"#/$defs/helm-values.livenessProbe.failureThreshold"},"initialDelaySeconds":{"$ref":"#/$defs/helm-values.livenessProbe.initialDelaySeconds"},"periodSeconds":{"$ref":"#/$defs/helm-values.livenessProbe.periodSeconds"},"successThreshold":{"$ref":"#/$defs/helm-values.livenessProbe.successThreshold"},"timeoutSeconds":{"$ref":"#/$defs/helm-values.livenessProbe.timeoutSeconds"}},"additionalProperties":false},"helm-values.livenessProbe.enabled":{"description":"Specify whether to enable the liveness probe.","type":"boolean","default":true},"helm-values.livenessProbe.failureThreshold":{"description":"After a probe fails `failureThreshold` times in a row, Kubernetes considers that the overall check has failed: the container is not ready/healthy/live.","type":"number","default":5},"helm-values.livenessProbe.initialDelaySeconds":{"description":"Number of seconds after the container has started before startup, liveness or readiness probes are initiated.","type":"number","default":3},"helm-values.livenessProbe.periodSeconds":{"description":"How often (in seconds) to perform the probe. Default to 10 seconds.","type":"number","default":10},"helm-values.livenessProbe.successThreshold":{"description":"Minimum consecutive successes for the probe to be considered successful after having failed.","type":"number","default":1},"helm-values.livenessProbe.timeoutSeconds":{"description":"Number of seconds after which the probe times out.","type":"number","default":3},"helm-values.logLevel":{"description":"The log level of the inference-manager-engine container.","type":"number","default":10},"helm-values.managementGrpcPort":{"description":"The GRPC port number for the management service.","type":"number","default":8091},"helm-values.managementPort":{"description":"The HTTP port number for the management service.","type":"number","default":8090},"helm-values.modelManagerServerAddr":{"description":"The address of the model-manager-server to call public model APIs.","type":"string","default":"model-manager-server-grpc:8081"},"helm-values.monitoringPort":{"description":"The HTTP port number for the inference metrics serving.","type":"number","default":8084},"helm-values.nameOverride":{"description":"Override the \"inference-manager-server.name\" value, which is used to annotate some of the resources that are created by this Chart\n(using \"app.kubernetes.io/name\").","type":"string"},"helm-values.nodeSelector":{"description":"The nodeSelector on Pods tells Kubernetes to schedule Pods on the nodes with matching labels. For more information, see [Assigning Pods to Nodes](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/).","type":"object"},"helm-values.podAnnotations":{"description":"Optional additional annotations to add to the Deployment Pods.","type":"object"},"helm-values.podSecurityContext":{"description":"Security Context for the inference-manager-server pod. For more information, see [Configure a Security Context for a Pod or Container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/).","type":"object","default":{"fsGroup":2000}},"helm-values.rateLimit":{"description":"Settings for rate-limiting inference requests.\nThis limiter uses GCRA. For more information, see [Generic cell rate algorithm](https://en.wikipedia.org/wiki/Generic_cell_rate_algorithm).","type":"object","default":{"burst":30,"enable":true,"period":"10m","rate":200,"redis":{"address":"redis-master.redis:6379","secretName":"redis"},"storeType":"memory"}},"helm-values.replicaCount":{"description":"The number of replicas for the inference-manager-server Deployment.","type":"number","default":1},"helm-values.requestRouting":{"type":"object","properties":{"enableDynamicModelLoading":{"$ref":"#/$defs/helm-values.requestRouting.enableDynamicModelLoading"}},"additionalProperties":false},"helm-values.requestRouting.enableDynamicModelLoading":{"description":"Specify whether dynamic on-demand model loading is enabled. If set to false, the request will fail immediately if the specified model has not yet been loaded on any cluster.","type":"boolean","default":true},"helm-values.resources":{"description":"Resources to provide to the inference-manager-server pod. For more information, see [Resource Management for Pods and Containers](https://kubernetes.io/docs/concepts/configuration/manage-resources-Containers/).\n\nFor example:\nrequests:\n  cpu: 10m\n  memory: 32Mi","type":"object","default":{"limits":{"cpu":"1000m"},"requests":{"cpu":"250m","memory":"500Mi"}}},"helm-values.securityContext":{"description":"Security Context for the inference-manager-server container. For more information, see [Configure a Security Context for a Pod or Container](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/).","type":"object","default":{"capabilities":{"drop":["ALL"]},"readOnlyRootFilesystem":true,"runAsNonRoot":true,"runAsUser":1000}},"helm-values.service":{"type":"object","properties":{"annotations":{"$ref":"#/$defs/helm-values.service.annotations"}},"additionalProperties":false},"helm-values.service.annotations":{"description":"Optional annotations to add to the worker Service.","type":"object","default":{}},"helm-values.serviceAccount":{"type":"object","properties":{"create":{"$ref":"#/$defs/helm-values.serviceAccount.create"},"name":{"$ref":"#/$defs/helm-values.serviceAccount.name"}},"additionalProperties":false},"helm-values.serviceAccount.create":{"description":"Specifies whether a service account should be created.","type":"boolean","default":true},"helm-values.serviceAccount.name":{"description":"The name of the service account to use. If not set and create is true, a name is generated using the fullname template.","type":"string"},"helm-values.terminationGracePeriodSeconds":{"description":"Optional duration in seconds the pod needs to terminate gracefully. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). If not specified, the default grace period (30 seconds) will be used instead.","type":"string"},"helm-values.tolerations":{"description":"A list of Kubernetes Tolerations, if required.\nFor more information, see [Taints and Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/).\n\nFor example:\ntolerations:\n- key: foo.bar.com/role\n  operator: Equal\n  value: master\n  effect: NoSchedule","type":"array","items":{}},"helm-values.vectorStoreManagerInternalServerAddr":{"description":"The address of the vector-store-manager-server to call internal vector-store APIs.","type":"string","default":"vector-store-manager-server-internal-grpc:8083"},"helm-values.vectorStoreManagerServerAddr":{"description":"The address of the vector-store-manager-server to call public vector-store APIs.","type":"string","default":"vector-store-manager-server-grpc:8081"},"helm-values.version":{"description":"Override the container image tag to deploy by setting this variable. If no value is set, the chart's appVersion will be used.","type":"string"},"helm-values.volumeMounts":{"description":"Additional volume mounts to add to the inference-manager-server container. For more information, see [Volumes](https://kubernetes.io/docs/concepts/storage/volumes/).","type":"array","items":{}},"helm-values.volumes":{"description":"Additional volumes to add to the inference-manager-server pod. For more information, see [Volumes](https://kubernetes.io/docs/concepts/storage/volumes/).","type":"array","items":{}},"helm-values.workerServiceGrpcPort":{"description":"The GRPC port number for the worker service.","type":"number","default":8082},"helm-values.workerServiceGrpcService":{"type":"object","properties":{"annotations":{"$ref":"#/$defs/helm-values.workerServiceGrpcService.annotations"},"externalTrafficPolicy":{"$ref":"#/$defs/helm-values.workerServiceGrpcService.externalTrafficPolicy"},"loadBalancerSourceRanges":{"$ref":"#/$defs/helm-values.workerServiceGrpcService.loadBalancerSourceRanges"},"nodePort":{"$ref":"#/$defs/helm-values.workerServiceGrpcService.nodePort"},"port":{"$ref":"#/$defs/helm-values.workerServiceGrpcService.port"},"type":{"$ref":"#/$defs/helm-values.workerServiceGrpcService.type"}},"additionalProperties":false},"helm-values.workerServiceGrpcService.annotations":{"description":"Optional annotations to add to the worker Service.","type":"object"},"helm-values.workerServiceGrpcService.externalTrafficPolicy":{"description":"Specify the policy to control how traffic from external sources is routed.","type":"string"},"helm-values.workerServiceGrpcService.loadBalancerSourceRanges":{"description":"Optional firewall rules to only allow certain source ranges. NOTE: This field will be ignored if the cloud-provider does not support the feature.","type":"array","items":{}},"helm-values.workerServiceGrpcService.nodePort":{"description":"Optional node port number. If not specified, Kubernetes will allocate a port from a range. (default: 30000-32767) NOTE: This value is only available only when the Service type is `NodePort`.","type":"number"},"helm-values.workerServiceGrpcService.port":{"description":"The number of GRPC incoming port.","type":"number","default":8082},"helm-values.workerServiceGrpcService.type":{"description":"The Service type.","type":"string","default":"ClusterIP"},"helm-values.workerServiceTls":{"type":"object","properties":{"enable":{"$ref":"#/$defs/helm-values.workerServiceTls.enable"},"secretName":{"$ref":"#/$defs/helm-values.workerServiceTls.secretName"}},"additionalProperties":false},"helm-values.workerServiceTls.enable":{"description":"If enabled, communicate with workers over TLS.","type":"boolean","default":false},"helm-values.workerServiceTls.secretName":{"description":"The secret name that is mounted to the pod.","type":"string","default":"session-tls"}}}
