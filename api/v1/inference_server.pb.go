// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: api/v1/inference_server.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateChatCompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO(kenji): Revisit this.
	Messages         []*CreateChatCompletionRequest_Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	Model            string                                 `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	FrequencyPenalty float64                                `protobuf:"fixed64,3,opt,name=frequency_penalty,json=frequencyPenalty,proto3" json:"frequency_penalty,omitempty"`
	LogitBias        map[string]float64                     `protobuf:"bytes,4,rep,name=logit_bias,json=logitBias,proto3" json:"logit_bias,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Logprobs         bool                                   `protobuf:"varint,5,opt,name=logprobs,proto3" json:"logprobs,omitempty"`
	TopLogprobs      int32                                  `protobuf:"varint,6,opt,name=top_logprobs,json=topLogprobs,proto3" json:"top_logprobs,omitempty"`
	// MaxTokens
	// Deprecated: This value is now deprecated in favor of MaxCompletionTokens
	MaxTokens       int32                                       `protobuf:"varint,7,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	N               int32                                       `protobuf:"varint,8,opt,name=n,proto3" json:"n,omitempty"`
	PresencePenalty float64                                     `protobuf:"fixed64,9,opt,name=presence_penalty,json=presencePenalty,proto3" json:"presence_penalty,omitempty"`
	ResponseFormat  *CreateChatCompletionRequest_ResponseFormat `protobuf:"bytes,10,opt,name=response_format,json=responseFormat,proto3" json:"response_format,omitempty"`
	Seed            int32                                       `protobuf:"varint,11,opt,name=seed,proto3" json:"seed,omitempty"`
	// string / arrary/ null
	Stop          []string                                   `protobuf:"bytes,12,rep,name=stop,proto3" json:"stop,omitempty"`
	Stream        bool                                       `protobuf:"varint,13,opt,name=stream,proto3" json:"stream,omitempty"`
	StreamOptions *CreateChatCompletionRequest_StreamOptions `protobuf:"bytes,19,opt,name=stream_options,json=streamOptions,proto3" json:"stream_options,omitempty"`
	Temperature   float64                                    `protobuf:"fixed64,14,opt,name=temperature,proto3" json:"temperature,omitempty"`
	TopP          float64                                    `protobuf:"fixed64,15,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`
	Tools         []*CreateChatCompletionRequest_Tool        `protobuf:"bytes,16,rep,name=tools,proto3" json:"tools,omitempty"`
	// The type of the "tool_choice" field is a string or an object.
	// As we cannot have a string or an object in the proto, we use the "tool_choice_obj"
	// if a request sets the "tool_choice" field as an object.
	//
	// The "tool_choice_object" field is converted to the "tool_choice" field when the request is being
	// sent to an inference runtime.
	ToolChoice       string                                  `protobuf:"bytes,17,opt,name=tool_choice,json=toolChoice,proto3" json:"tool_choice,omitempty"`
	ToolChoiceObject *CreateChatCompletionRequest_ToolChoice `protobuf:"bytes,20,opt,name=tool_choice_object,json=toolChoiceObject,proto3" json:"tool_choice_object,omitempty"`
	User             string                                  `protobuf:"bytes,18,opt,name=user,proto3" json:"user,omitempty"`
	// MaxCompletionTokens specifies the maximum limit on the number of tokens that can be generated during a completion.`
	MaxCompletionTokens int32 `protobuf:"varint,21,opt,name=max_completion_tokens,json=maxCompletionTokens,proto3" json:"max_completion_tokens,omitempty"`
	// encoded_chat_template_kwargs is encoded value of "chat_template_kwargs". This is a special parameter
	// that only vLLM uses.
	//
	// The field is converted to the "chat_template_kwargs" field when the request is being
	// sent to vLLM.
	//
	// https://docs.vllm.ai/en/latest/serving/openai_compatible_server.html#id7
	EncodedChatTemplateKwargs string `protobuf:"bytes,22,opt,name=encoded_chat_template_kwargs,json=encodedChatTemplateKwargs,proto3" json:"encoded_chat_template_kwargs,omitempty"`
}

func (x *CreateChatCompletionRequest) Reset() {
	*x = CreateChatCompletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionRequest) ProtoMessage() {}

func (x *CreateChatCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionRequest.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{0}
}

func (x *CreateChatCompletionRequest) GetMessages() []*CreateChatCompletionRequest_Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (x *CreateChatCompletionRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CreateChatCompletionRequest) GetFrequencyPenalty() float64 {
	if x != nil {
		return x.FrequencyPenalty
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetLogitBias() map[string]float64 {
	if x != nil {
		return x.LogitBias
	}
	return nil
}

func (x *CreateChatCompletionRequest) GetLogprobs() bool {
	if x != nil {
		return x.Logprobs
	}
	return false
}

func (x *CreateChatCompletionRequest) GetTopLogprobs() int32 {
	if x != nil {
		return x.TopLogprobs
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetMaxTokens() int32 {
	if x != nil {
		return x.MaxTokens
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetPresencePenalty() float64 {
	if x != nil {
		return x.PresencePenalty
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetResponseFormat() *CreateChatCompletionRequest_ResponseFormat {
	if x != nil {
		return x.ResponseFormat
	}
	return nil
}

func (x *CreateChatCompletionRequest) GetSeed() int32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetStop() []string {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *CreateChatCompletionRequest) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

func (x *CreateChatCompletionRequest) GetStreamOptions() *CreateChatCompletionRequest_StreamOptions {
	if x != nil {
		return x.StreamOptions
	}
	return nil
}

func (x *CreateChatCompletionRequest) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetTopP() float64 {
	if x != nil {
		return x.TopP
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetTools() []*CreateChatCompletionRequest_Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *CreateChatCompletionRequest) GetToolChoice() string {
	if x != nil {
		return x.ToolChoice
	}
	return ""
}

func (x *CreateChatCompletionRequest) GetToolChoiceObject() *CreateChatCompletionRequest_ToolChoice {
	if x != nil {
		return x.ToolChoiceObject
	}
	return nil
}

func (x *CreateChatCompletionRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *CreateChatCompletionRequest) GetMaxCompletionTokens() int32 {
	if x != nil {
		return x.MaxCompletionTokens
	}
	return 0
}

func (x *CreateChatCompletionRequest) GetEncodedChatTemplateKwargs() string {
	if x != nil {
		return x.EncodedChatTemplateKwargs
	}
	return ""
}

type ToolCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type     string             `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Function *ToolCall_Function `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *ToolCall) Reset() {
	*x = ToolCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolCall) ProtoMessage() {}

func (x *ToolCall) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolCall.ProtoReflect.Descriptor instead.
func (*ToolCall) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{1}
}

func (x *ToolCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ToolCall) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ToolCall) GetFunction() *ToolCall_Function {
	if x != nil {
		return x.Function
	}
	return nil
}

type Logprobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content []*Logprobs_Content `protobuf:"bytes,1,rep,name=content,proto3" json:"content,omitempty"`
}

func (x *Logprobs) Reset() {
	*x = Logprobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logprobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logprobs) ProtoMessage() {}

func (x *Logprobs) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logprobs.ProtoReflect.Descriptor instead.
func (*Logprobs) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{2}
}

func (x *Logprobs) GetContent() []*Logprobs_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

type Usage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CompletionTokens int32 `protobuf:"varint,1,opt,name=completion_tokens,json=completionTokens,proto3" json:"completion_tokens,omitempty"`
	PromptTokens     int32 `protobuf:"varint,2,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	TotalTokens      int32 `protobuf:"varint,3,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
}

func (x *Usage) Reset() {
	*x = Usage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Usage) ProtoMessage() {}

func (x *Usage) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Usage.ProtoReflect.Descriptor instead.
func (*Usage) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{3}
}

func (x *Usage) GetCompletionTokens() int32 {
	if x != nil {
		return x.CompletionTokens
	}
	return 0
}

func (x *Usage) GetPromptTokens() int32 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *Usage) GetTotalTokens() int32 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

type ChatCompletion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Choices           []*ChatCompletion_Choice `protobuf:"bytes,2,rep,name=choices,proto3" json:"choices,omitempty"`
	Created           int32                    `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
	Model             string                   `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	SystemFingerprint string                   `protobuf:"bytes,5,opt,name=system_fingerprint,json=systemFingerprint,proto3" json:"system_fingerprint,omitempty"`
	Object            string                   `protobuf:"bytes,6,opt,name=object,proto3" json:"object,omitempty"`
	Usage             *Usage                   `protobuf:"bytes,7,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *ChatCompletion) Reset() {
	*x = ChatCompletion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletion) ProtoMessage() {}

func (x *ChatCompletion) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletion.ProtoReflect.Descriptor instead.
func (*ChatCompletion) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{4}
}

func (x *ChatCompletion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChatCompletion) GetChoices() []*ChatCompletion_Choice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *ChatCompletion) GetCreated() int32 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ChatCompletion) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ChatCompletion) GetSystemFingerprint() string {
	if x != nil {
		return x.SystemFingerprint
	}
	return ""
}

func (x *ChatCompletion) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ChatCompletion) GetUsage() *Usage {
	if x != nil {
		return x.Usage
	}
	return nil
}

type ChatCompletionChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string                        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Choices           []*ChatCompletionChunk_Choice `protobuf:"bytes,2,rep,name=choices,proto3" json:"choices,omitempty"`
	Created           int32                         `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
	Model             string                        `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	SystemFingerprint string                        `protobuf:"bytes,5,opt,name=system_fingerprint,json=systemFingerprint,proto3" json:"system_fingerprint,omitempty"`
	Object            string                        `protobuf:"bytes,6,opt,name=object,proto3" json:"object,omitempty"`
	Usage             *Usage                        `protobuf:"bytes,7,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *ChatCompletionChunk) Reset() {
	*x = ChatCompletionChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionChunk) ProtoMessage() {}

func (x *ChatCompletionChunk) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionChunk.ProtoReflect.Descriptor instead.
func (*ChatCompletionChunk) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{5}
}

func (x *ChatCompletionChunk) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChatCompletionChunk) GetChoices() []*ChatCompletionChunk_Choice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *ChatCompletionChunk) GetCreated() int32 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *ChatCompletionChunk) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ChatCompletionChunk) GetSystemFingerprint() string {
	if x != nil {
		return x.SystemFingerprint
	}
	return ""
}

func (x *ChatCompletionChunk) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ChatCompletionChunk) GetUsage() *Usage {
	if x != nil {
		return x.Usage
	}
	return nil
}

// RagFunction is used to unmarshal the json string specified in `Parameters` of Tool message.
type RagFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VectorStoreName string `protobuf:"bytes,1,opt,name=vector_store_name,json=vectorStoreName,proto3" json:"vector_store_name,omitempty"`
}

func (x *RagFunction) Reset() {
	*x = RagFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RagFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RagFunction) ProtoMessage() {}

func (x *RagFunction) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RagFunction.ProtoReflect.Descriptor instead.
func (*RagFunction) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{6}
}

func (x *RagFunction) GetVectorStoreName() string {
	if x != nil {
		return x.VectorStoreName
	}
	return ""
}

type CreateCompletionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Model string `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	// This can be a string or an array of strings, but we use string assuming that it is more common.
	Prompt           string                                `protobuf:"bytes,2,opt,name=prompt,proto3" json:"prompt,omitempty"`
	BestOf           int32                                 `protobuf:"varint,3,opt,name=best_of,json=bestOf,proto3" json:"best_of,omitempty"`
	Echo             bool                                  `protobuf:"varint,4,opt,name=echo,proto3" json:"echo,omitempty"`
	FrequencyPenalty float64                               `protobuf:"fixed64,5,opt,name=frequency_penalty,json=frequencyPenalty,proto3" json:"frequency_penalty,omitempty"`
	LogitBias        map[string]float64                    `protobuf:"bytes,6,rep,name=logit_bias,json=logitBias,proto3" json:"logit_bias,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Logprobs         int32                                 `protobuf:"varint,7,opt,name=logprobs,proto3" json:"logprobs,omitempty"`
	MaxTokens        int32                                 `protobuf:"varint,8,opt,name=max_tokens,json=maxTokens,proto3" json:"max_tokens,omitempty"`
	N                int32                                 `protobuf:"varint,9,opt,name=n,proto3" json:"n,omitempty"`
	PresencePenalty  float64                               `protobuf:"fixed64,10,opt,name=presence_penalty,json=presencePenalty,proto3" json:"presence_penalty,omitempty"`
	Seed             int32                                 `protobuf:"varint,11,opt,name=seed,proto3" json:"seed,omitempty"`
	Stop             []string                              `protobuf:"bytes,12,rep,name=stop,proto3" json:"stop,omitempty"`
	Stream           bool                                  `protobuf:"varint,13,opt,name=stream,proto3" json:"stream,omitempty"`
	StreamOption     *CreateCompletionRequest_StreamOption `protobuf:"bytes,14,opt,name=stream_option,json=streamOption,proto3" json:"stream_option,omitempty"`
	Suffix           string                                `protobuf:"bytes,15,opt,name=suffix,proto3" json:"suffix,omitempty"`
	Temperature      float64                               `protobuf:"fixed64,16,opt,name=temperature,proto3" json:"temperature,omitempty"`
	// is_temperature_set is used to indicate whether the temperature is set or not.
	// This is required as the OpenAI API spec use 1.0 as the default value for temperature while
	// setting the temperature to 0.0 in the proto is equivalent to unset.
	IsTemperatureSet bool    `protobuf:"varint,19,opt,name=is_temperature_set,json=isTemperatureSet,proto3" json:"is_temperature_set,omitempty"`
	TopP             float64 `protobuf:"fixed64,17,opt,name=top_p,json=topP,proto3" json:"top_p,omitempty"`
	User             string  `protobuf:"bytes,18,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *CreateCompletionRequest) Reset() {
	*x = CreateCompletionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompletionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompletionRequest) ProtoMessage() {}

func (x *CreateCompletionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompletionRequest.ProtoReflect.Descriptor instead.
func (*CreateCompletionRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{7}
}

func (x *CreateCompletionRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CreateCompletionRequest) GetPrompt() string {
	if x != nil {
		return x.Prompt
	}
	return ""
}

func (x *CreateCompletionRequest) GetBestOf() int32 {
	if x != nil {
		return x.BestOf
	}
	return 0
}

func (x *CreateCompletionRequest) GetEcho() bool {
	if x != nil {
		return x.Echo
	}
	return false
}

func (x *CreateCompletionRequest) GetFrequencyPenalty() float64 {
	if x != nil {
		return x.FrequencyPenalty
	}
	return 0
}

func (x *CreateCompletionRequest) GetLogitBias() map[string]float64 {
	if x != nil {
		return x.LogitBias
	}
	return nil
}

func (x *CreateCompletionRequest) GetLogprobs() int32 {
	if x != nil {
		return x.Logprobs
	}
	return 0
}

func (x *CreateCompletionRequest) GetMaxTokens() int32 {
	if x != nil {
		return x.MaxTokens
	}
	return 0
}

func (x *CreateCompletionRequest) GetN() int32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *CreateCompletionRequest) GetPresencePenalty() float64 {
	if x != nil {
		return x.PresencePenalty
	}
	return 0
}

func (x *CreateCompletionRequest) GetSeed() int32 {
	if x != nil {
		return x.Seed
	}
	return 0
}

func (x *CreateCompletionRequest) GetStop() []string {
	if x != nil {
		return x.Stop
	}
	return nil
}

func (x *CreateCompletionRequest) GetStream() bool {
	if x != nil {
		return x.Stream
	}
	return false
}

func (x *CreateCompletionRequest) GetStreamOption() *CreateCompletionRequest_StreamOption {
	if x != nil {
		return x.StreamOption
	}
	return nil
}

func (x *CreateCompletionRequest) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *CreateCompletionRequest) GetTemperature() float64 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *CreateCompletionRequest) GetIsTemperatureSet() bool {
	if x != nil {
		return x.IsTemperatureSet
	}
	return false
}

func (x *CreateCompletionRequest) GetTopP() float64 {
	if x != nil {
		return x.TopP
	}
	return 0
}

func (x *CreateCompletionRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type Completion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Choices           []*Completion_Choice `protobuf:"bytes,2,rep,name=choices,proto3" json:"choices,omitempty"`
	Created           int32                `protobuf:"varint,3,opt,name=created,proto3" json:"created,omitempty"`
	Model             string               `protobuf:"bytes,4,opt,name=model,proto3" json:"model,omitempty"`
	SystemFingerprint string               `protobuf:"bytes,5,opt,name=system_fingerprint,json=systemFingerprint,proto3" json:"system_fingerprint,omitempty"`
	Object            string               `protobuf:"bytes,6,opt,name=object,proto3" json:"object,omitempty"`
	Usage             *Usage               `protobuf:"bytes,7,opt,name=usage,proto3" json:"usage,omitempty"`
}

func (x *Completion) Reset() {
	*x = Completion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Completion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Completion) ProtoMessage() {}

func (x *Completion) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Completion.ProtoReflect.Descriptor instead.
func (*Completion) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{8}
}

func (x *Completion) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Completion) GetChoices() []*Completion_Choice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *Completion) GetCreated() int32 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *Completion) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Completion) GetSystemFingerprint() string {
	if x != nil {
		return x.SystemFingerprint
	}
	return ""
}

func (x *Completion) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *Completion) GetUsage() *Usage {
	if x != nil {
		return x.Usage
	}
	return nil
}

// Message has fields for system message, user message, assistant message, and tool message.
type CreateChatCompletionRequest_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of the content is either string or array in the OpenAI API spec, but
	// we only support the array type here. When a client sends a string, it is converted before
	// the request is being unmarshalled.
	Content   []*CreateChatCompletionRequest_Message_Content  `protobuf:"bytes,5,rep,name=content,proto3" json:"content,omitempty"`
	Role      string                                          `protobuf:"bytes,2,opt,name=role,proto3" json:"role,omitempty"`
	Name      string                                          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	ToolCalls []*CreateChatCompletionRequest_Message_ToolCall `protobuf:"bytes,4,rep,name=tool_calls,json=toolCalls,proto3" json:"tool_calls,omitempty"`
	// Used by the "Tool message".
	ToolCallId string `protobuf:"bytes,6,opt,name=tool_call_id,json=toolCallId,proto3" json:"tool_call_id,omitempty"`
}

func (x *CreateChatCompletionRequest_Message) Reset() {
	*x = CreateChatCompletionRequest_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionRequest_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionRequest_Message) ProtoMessage() {}

func (x *CreateChatCompletionRequest_Message) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionRequest_Message.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionRequest_Message) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CreateChatCompletionRequest_Message) GetContent() []*CreateChatCompletionRequest_Message_Content {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *CreateChatCompletionRequest_Message) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *CreateChatCompletionRequest_Message) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateChatCompletionRequest_Message) GetToolCalls() []*CreateChatCompletionRequest_Message_ToolCall {
	if x != nil {
		return x.ToolCalls
	}
	return nil
}

func (x *CreateChatCompletionRequest_Message) GetToolCallId() string {
	if x != nil {
		return x.ToolCallId
	}
	return ""
}

type CreateChatCompletionRequest_ToolChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string                                           `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Function *CreateChatCompletionRequest_ToolChoice_Function `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *CreateChatCompletionRequest_ToolChoice) Reset() {
	*x = CreateChatCompletionRequest_ToolChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionRequest_ToolChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionRequest_ToolChoice) ProtoMessage() {}

func (x *CreateChatCompletionRequest_ToolChoice) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionRequest_ToolChoice.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionRequest_ToolChoice) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{0, 1}
}

func (x *CreateChatCompletionRequest_ToolChoice) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateChatCompletionRequest_ToolChoice) GetFunction() *CreateChatCompletionRequest_ToolChoice_Function {
	if x != nil {
		return x.Function
	}
	return nil
}

type CreateChatCompletionRequest_ResponseFormat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *CreateChatCompletionRequest_ResponseFormat) Reset() {
	*x = CreateChatCompletionRequest_ResponseFormat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionRequest_ResponseFormat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionRequest_ResponseFormat) ProtoMessage() {}

func (x *CreateChatCompletionRequest_ResponseFormat) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionRequest_ResponseFormat.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionRequest_ResponseFormat) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{0, 2}
}

func (x *CreateChatCompletionRequest_ResponseFormat) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type CreateChatCompletionRequest_Tool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type     string                                     `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Function *CreateChatCompletionRequest_Tool_Function `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *CreateChatCompletionRequest_Tool) Reset() {
	*x = CreateChatCompletionRequest_Tool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionRequest_Tool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionRequest_Tool) ProtoMessage() {}

func (x *CreateChatCompletionRequest_Tool) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionRequest_Tool.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionRequest_Tool) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{0, 3}
}

func (x *CreateChatCompletionRequest_Tool) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateChatCompletionRequest_Tool) GetFunction() *CreateChatCompletionRequest_Tool_Function {
	if x != nil {
		return x.Function
	}
	return nil
}

type CreateChatCompletionRequest_StreamOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeUsage bool `protobuf:"varint,1,opt,name=include_usage,json=includeUsage,proto3" json:"include_usage,omitempty"`
}

func (x *CreateChatCompletionRequest_StreamOptions) Reset() {
	*x = CreateChatCompletionRequest_StreamOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionRequest_StreamOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionRequest_StreamOptions) ProtoMessage() {}

func (x *CreateChatCompletionRequest_StreamOptions) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionRequest_StreamOptions.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionRequest_StreamOptions) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{0, 4}
}

func (x *CreateChatCompletionRequest_StreamOptions) GetIncludeUsage() bool {
	if x != nil {
		return x.IncludeUsage
	}
	return false
}

type CreateChatCompletionRequest_Message_ToolCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                                                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type     string                                                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Function *CreateChatCompletionRequest_Message_ToolCall_Function `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *CreateChatCompletionRequest_Message_ToolCall) Reset() {
	*x = CreateChatCompletionRequest_Message_ToolCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionRequest_Message_ToolCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionRequest_Message_ToolCall) ProtoMessage() {}

func (x *CreateChatCompletionRequest_Message_ToolCall) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionRequest_Message_ToolCall.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionRequest_Message_ToolCall) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *CreateChatCompletionRequest_Message_ToolCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CreateChatCompletionRequest_Message_ToolCall) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateChatCompletionRequest_Message_ToolCall) GetFunction() *CreateChatCompletionRequest_Message_ToolCall_Function {
	if x != nil {
		return x.Function
	}
	return nil
}

type CreateChatCompletionRequest_Message_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       string                                                  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Text       string                                                  `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	ImageUrl   *CreateChatCompletionRequest_Message_Content_ImageUrl   `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	InputAudio *CreateChatCompletionRequest_Message_Content_InputAudio `protobuf:"bytes,4,opt,name=input_audio,json=inputAudio,proto3" json:"input_audio,omitempty"`
	AudioUrl   *CreateChatCompletionRequest_Message_Content_AudioUrl   `protobuf:"bytes,5,opt,name=audio_url,json=audioUrl,proto3" json:"audio_url,omitempty"`
}

func (x *CreateChatCompletionRequest_Message_Content) Reset() {
	*x = CreateChatCompletionRequest_Message_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionRequest_Message_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionRequest_Message_Content) ProtoMessage() {}

func (x *CreateChatCompletionRequest_Message_Content) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionRequest_Message_Content.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionRequest_Message_Content) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{0, 0, 1}
}

func (x *CreateChatCompletionRequest_Message_Content) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateChatCompletionRequest_Message_Content) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *CreateChatCompletionRequest_Message_Content) GetImageUrl() *CreateChatCompletionRequest_Message_Content_ImageUrl {
	if x != nil {
		return x.ImageUrl
	}
	return nil
}

func (x *CreateChatCompletionRequest_Message_Content) GetInputAudio() *CreateChatCompletionRequest_Message_Content_InputAudio {
	if x != nil {
		return x.InputAudio
	}
	return nil
}

func (x *CreateChatCompletionRequest_Message_Content) GetAudioUrl() *CreateChatCompletionRequest_Message_Content_AudioUrl {
	if x != nil {
		return x.AudioUrl
	}
	return nil
}

type CreateChatCompletionRequest_Message_ToolCall_Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Arguments string `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *CreateChatCompletionRequest_Message_ToolCall_Function) Reset() {
	*x = CreateChatCompletionRequest_Message_ToolCall_Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionRequest_Message_ToolCall_Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionRequest_Message_ToolCall_Function) ProtoMessage() {}

func (x *CreateChatCompletionRequest_Message_ToolCall_Function) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionRequest_Message_ToolCall_Function.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionRequest_Message_ToolCall_Function) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

func (x *CreateChatCompletionRequest_Message_ToolCall_Function) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateChatCompletionRequest_Message_ToolCall_Function) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

// Refer to https://platform.openai.com/docs/api-reference/chat/create#chat-create-messages
type CreateChatCompletionRequest_Message_Content_ImageUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url    string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Detail string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *CreateChatCompletionRequest_Message_Content_ImageUrl) Reset() {
	*x = CreateChatCompletionRequest_Message_Content_ImageUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionRequest_Message_Content_ImageUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionRequest_Message_Content_ImageUrl) ProtoMessage() {}

func (x *CreateChatCompletionRequest_Message_Content_ImageUrl) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionRequest_Message_Content_ImageUrl.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionRequest_Message_Content_ImageUrl) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{0, 0, 1, 0}
}

func (x *CreateChatCompletionRequest_Message_Content_ImageUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CreateChatCompletionRequest_Message_Content_ImageUrl) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type CreateChatCompletionRequest_Message_Content_InputAudio struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
}

func (x *CreateChatCompletionRequest_Message_Content_InputAudio) Reset() {
	*x = CreateChatCompletionRequest_Message_Content_InputAudio{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionRequest_Message_Content_InputAudio) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionRequest_Message_Content_InputAudio) ProtoMessage() {}

func (x *CreateChatCompletionRequest_Message_Content_InputAudio) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionRequest_Message_Content_InputAudio.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionRequest_Message_Content_InputAudio) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{0, 0, 1, 1}
}

func (x *CreateChatCompletionRequest_Message_Content_InputAudio) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *CreateChatCompletionRequest_Message_Content_InputAudio) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

// AudioUrl is non-openai compatible. It is used by vLLM to handle audio input.
type CreateChatCompletionRequest_Message_Content_AudioUrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *CreateChatCompletionRequest_Message_Content_AudioUrl) Reset() {
	*x = CreateChatCompletionRequest_Message_Content_AudioUrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionRequest_Message_Content_AudioUrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionRequest_Message_Content_AudioUrl) ProtoMessage() {}

func (x *CreateChatCompletionRequest_Message_Content_AudioUrl) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionRequest_Message_Content_AudioUrl.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionRequest_Message_Content_AudioUrl) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{0, 0, 1, 2}
}

func (x *CreateChatCompletionRequest_Message_Content_AudioUrl) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type CreateChatCompletionRequest_ToolChoice_Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateChatCompletionRequest_ToolChoice_Function) Reset() {
	*x = CreateChatCompletionRequest_ToolChoice_Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionRequest_ToolChoice_Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionRequest_ToolChoice_Function) ProtoMessage() {}

func (x *CreateChatCompletionRequest_ToolChoice_Function) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionRequest_ToolChoice_Function.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionRequest_ToolChoice_Function) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *CreateChatCompletionRequest_ToolChoice_Function) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateChatCompletionRequest_Tool_Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// OpenAI API has the "parameters" field that stores a JSON Schema object.
	// As we cannot have a JSON Schema object in the proto, we encode the JSON Schema object
	// with base64 and store it before unmarshalling it in the server.
	//
	// The field is converted to the "parameters" field when the request is being
	// sent to an inference runtime.
	EncodedParameters string `protobuf:"bytes,3,opt,name=encoded_parameters,json=encodedParameters,proto3" json:"encoded_parameters,omitempty"`
}

func (x *CreateChatCompletionRequest_Tool_Function) Reset() {
	*x = CreateChatCompletionRequest_Tool_Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateChatCompletionRequest_Tool_Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateChatCompletionRequest_Tool_Function) ProtoMessage() {}

func (x *CreateChatCompletionRequest_Tool_Function) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateChatCompletionRequest_Tool_Function.ProtoReflect.Descriptor instead.
func (*CreateChatCompletionRequest_Tool_Function) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{0, 3, 0}
}

func (x *CreateChatCompletionRequest_Tool_Function) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateChatCompletionRequest_Tool_Function) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateChatCompletionRequest_Tool_Function) GetEncodedParameters() string {
	if x != nil {
		return x.EncodedParameters
	}
	return ""
}

type ToolCall_Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Arguments string `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *ToolCall_Function) Reset() {
	*x = ToolCall_Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ToolCall_Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ToolCall_Function) ProtoMessage() {}

func (x *ToolCall_Function) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ToolCall_Function.ProtoReflect.Descriptor instead.
func (*ToolCall_Function) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ToolCall_Function) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ToolCall_Function) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

type Logprobs_Content struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   string  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Logprob float64 `protobuf:"fixed64,2,opt,name=logprob,proto3" json:"logprob,omitempty"`
	// A list of integers representing the UTF-8 bytes representation of the token.
	Bytes       []byte                        `protobuf:"bytes,3,opt,name=bytes,proto3" json:"bytes,omitempty"`
	TopLogprobs *Logprobs_Content_TopLogprobs `protobuf:"bytes,4,opt,name=top_logprobs,json=topLogprobs,proto3" json:"top_logprobs,omitempty"`
}

func (x *Logprobs_Content) Reset() {
	*x = Logprobs_Content{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logprobs_Content) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logprobs_Content) ProtoMessage() {}

func (x *Logprobs_Content) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logprobs_Content.ProtoReflect.Descriptor instead.
func (*Logprobs_Content) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{2, 0}
}

func (x *Logprobs_Content) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Logprobs_Content) GetLogprob() float64 {
	if x != nil {
		return x.Logprob
	}
	return 0
}

func (x *Logprobs_Content) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *Logprobs_Content) GetTopLogprobs() *Logprobs_Content_TopLogprobs {
	if x != nil {
		return x.TopLogprobs
	}
	return nil
}

type Logprobs_Content_TopLogprobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token   string  `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Logprob float64 `protobuf:"fixed64,2,opt,name=logprob,proto3" json:"logprob,omitempty"`
	Bytes   []byte  `protobuf:"bytes,3,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *Logprobs_Content_TopLogprobs) Reset() {
	*x = Logprobs_Content_TopLogprobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Logprobs_Content_TopLogprobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Logprobs_Content_TopLogprobs) ProtoMessage() {}

func (x *Logprobs_Content_TopLogprobs) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Logprobs_Content_TopLogprobs.ProtoReflect.Descriptor instead.
func (*Logprobs_Content_TopLogprobs) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *Logprobs_Content_TopLogprobs) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Logprobs_Content_TopLogprobs) GetLogprob() float64 {
	if x != nil {
		return x.Logprob
	}
	return 0
}

func (x *Logprobs_Content_TopLogprobs) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

type ChatCompletion_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishReason string                         `protobuf:"bytes,1,opt,name=finish_reason,json=finishReason,proto3" json:"finish_reason,omitempty"`
	Index        int32                          `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Message      *ChatCompletion_Choice_Message `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Logprobs     *Logprobs                      `protobuf:"bytes,4,opt,name=logprobs,proto3" json:"logprobs,omitempty"`
}

func (x *ChatCompletion_Choice) Reset() {
	*x = ChatCompletion_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletion_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletion_Choice) ProtoMessage() {}

func (x *ChatCompletion_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletion_Choice.ProtoReflect.Descriptor instead.
func (*ChatCompletion_Choice) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ChatCompletion_Choice) GetFinishReason() string {
	if x != nil {
		return x.FinishReason
	}
	return ""
}

func (x *ChatCompletion_Choice) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ChatCompletion_Choice) GetMessage() *ChatCompletion_Choice_Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ChatCompletion_Choice) GetLogprobs() *Logprobs {
	if x != nil {
		return x.Logprobs
	}
	return nil
}

type ChatCompletion_Choice_Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content   string      `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	ToolCalls []*ToolCall `protobuf:"bytes,2,rep,name=tool_calls,json=toolCalls,proto3" json:"tool_calls,omitempty"`
	Role      string      `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *ChatCompletion_Choice_Message) Reset() {
	*x = ChatCompletion_Choice_Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletion_Choice_Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletion_Choice_Message) ProtoMessage() {}

func (x *ChatCompletion_Choice_Message) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletion_Choice_Message.ProtoReflect.Descriptor instead.
func (*ChatCompletion_Choice_Message) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{4, 0, 0}
}

func (x *ChatCompletion_Choice_Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChatCompletion_Choice_Message) GetToolCalls() []*ToolCall {
	if x != nil {
		return x.ToolCalls
	}
	return nil
}

func (x *ChatCompletion_Choice_Message) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type ChatCompletionChunk_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delta        *ChatCompletionChunk_Choice_Delta `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
	FinishReason string                            `protobuf:"bytes,2,opt,name=finish_reason,json=finishReason,proto3" json:"finish_reason,omitempty"`
	Index        int32                             `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	Logprobs     *Logprobs                         `protobuf:"bytes,4,opt,name=logprobs,proto3" json:"logprobs,omitempty"`
}

func (x *ChatCompletionChunk_Choice) Reset() {
	*x = ChatCompletionChunk_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionChunk_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionChunk_Choice) ProtoMessage() {}

func (x *ChatCompletionChunk_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionChunk_Choice.ProtoReflect.Descriptor instead.
func (*ChatCompletionChunk_Choice) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{5, 0}
}

func (x *ChatCompletionChunk_Choice) GetDelta() *ChatCompletionChunk_Choice_Delta {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *ChatCompletionChunk_Choice) GetFinishReason() string {
	if x != nil {
		return x.FinishReason
	}
	return ""
}

func (x *ChatCompletionChunk_Choice) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ChatCompletionChunk_Choice) GetLogprobs() *Logprobs {
	if x != nil {
		return x.Logprobs
	}
	return nil
}

type ChatCompletionChunk_Choice_Delta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content   string                                       `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
	ToolCalls []*ChatCompletionChunk_Choice_Delta_ToolCall `protobuf:"bytes,2,rep,name=tool_calls,json=toolCalls,proto3" json:"tool_calls,omitempty"`
	Role      string                                       `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *ChatCompletionChunk_Choice_Delta) Reset() {
	*x = ChatCompletionChunk_Choice_Delta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionChunk_Choice_Delta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionChunk_Choice_Delta) ProtoMessage() {}

func (x *ChatCompletionChunk_Choice_Delta) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionChunk_Choice_Delta.ProtoReflect.Descriptor instead.
func (*ChatCompletionChunk_Choice_Delta) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{5, 0, 0}
}

func (x *ChatCompletionChunk_Choice_Delta) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ChatCompletionChunk_Choice_Delta) GetToolCalls() []*ChatCompletionChunk_Choice_Delta_ToolCall {
	if x != nil {
		return x.ToolCalls
	}
	return nil
}

func (x *ChatCompletionChunk_Choice_Delta) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

type ChatCompletionChunk_Choice_Delta_ToolCall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string                                              `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type     string                                              `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Function *ChatCompletionChunk_Choice_Delta_ToolCall_Function `protobuf:"bytes,3,opt,name=function,proto3" json:"function,omitempty"`
}

func (x *ChatCompletionChunk_Choice_Delta_ToolCall) Reset() {
	*x = ChatCompletionChunk_Choice_Delta_ToolCall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionChunk_Choice_Delta_ToolCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionChunk_Choice_Delta_ToolCall) ProtoMessage() {}

func (x *ChatCompletionChunk_Choice_Delta_ToolCall) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionChunk_Choice_Delta_ToolCall.ProtoReflect.Descriptor instead.
func (*ChatCompletionChunk_Choice_Delta_ToolCall) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{5, 0, 0, 0}
}

func (x *ChatCompletionChunk_Choice_Delta_ToolCall) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChatCompletionChunk_Choice_Delta_ToolCall) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ChatCompletionChunk_Choice_Delta_ToolCall) GetFunction() *ChatCompletionChunk_Choice_Delta_ToolCall_Function {
	if x != nil {
		return x.Function
	}
	return nil
}

type ChatCompletionChunk_Choice_Delta_ToolCall_Function struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Arguments string `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *ChatCompletionChunk_Choice_Delta_ToolCall_Function) Reset() {
	*x = ChatCompletionChunk_Choice_Delta_ToolCall_Function{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatCompletionChunk_Choice_Delta_ToolCall_Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatCompletionChunk_Choice_Delta_ToolCall_Function) ProtoMessage() {}

func (x *ChatCompletionChunk_Choice_Delta_ToolCall_Function) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatCompletionChunk_Choice_Delta_ToolCall_Function.ProtoReflect.Descriptor instead.
func (*ChatCompletionChunk_Choice_Delta_ToolCall_Function) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{5, 0, 0, 0, 0}
}

func (x *ChatCompletionChunk_Choice_Delta_ToolCall_Function) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChatCompletionChunk_Choice_Delta_ToolCall_Function) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

type CreateCompletionRequest_StreamOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeUsage bool `protobuf:"varint,1,opt,name=include_usage,json=includeUsage,proto3" json:"include_usage,omitempty"`
}

func (x *CreateCompletionRequest_StreamOption) Reset() {
	*x = CreateCompletionRequest_StreamOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCompletionRequest_StreamOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCompletionRequest_StreamOption) ProtoMessage() {}

func (x *CreateCompletionRequest_StreamOption) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCompletionRequest_StreamOption.ProtoReflect.Descriptor instead.
func (*CreateCompletionRequest_StreamOption) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CreateCompletionRequest_StreamOption) GetIncludeUsage() bool {
	if x != nil {
		return x.IncludeUsage
	}
	return false
}

type Completion_Choice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FinishReason string                      `protobuf:"bytes,1,opt,name=finish_reason,json=finishReason,proto3" json:"finish_reason,omitempty"`
	Index        int32                       `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	Logprobs     *Completion_Choice_Logprobs `protobuf:"bytes,3,opt,name=logprobs,proto3" json:"logprobs,omitempty"`
	Text         string                      `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *Completion_Choice) Reset() {
	*x = Completion_Choice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Completion_Choice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Completion_Choice) ProtoMessage() {}

func (x *Completion_Choice) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Completion_Choice.ProtoReflect.Descriptor instead.
func (*Completion_Choice) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{8, 0}
}

func (x *Completion_Choice) GetFinishReason() string {
	if x != nil {
		return x.FinishReason
	}
	return ""
}

func (x *Completion_Choice) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Completion_Choice) GetLogprobs() *Completion_Choice_Logprobs {
	if x != nil {
		return x.Logprobs
	}
	return nil
}

func (x *Completion_Choice) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Completion_Choice_Logprobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: Revisit this. The types of the fields are not clearly specified in the spec.
	TextOffset    int32   `protobuf:"varint,1,opt,name=text_offset,json=textOffset,proto3" json:"text_offset,omitempty"`
	TokenLogprobs float64 `protobuf:"fixed64,2,opt,name=token_logprobs,json=tokenLogprobs,proto3" json:"token_logprobs,omitempty"`
	Tokens        string  `protobuf:"bytes,3,opt,name=tokens,proto3" json:"tokens,omitempty"`
	TopLogprobs   float64 `protobuf:"fixed64,4,opt,name=top_logprobs,json=topLogprobs,proto3" json:"top_logprobs,omitempty"`
}

func (x *Completion_Choice_Logprobs) Reset() {
	*x = Completion_Choice_Logprobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_inference_server_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Completion_Choice_Logprobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Completion_Choice_Logprobs) ProtoMessage() {}

func (x *Completion_Choice_Logprobs) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_inference_server_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Completion_Choice_Logprobs.ProtoReflect.Descriptor instead.
func (*Completion_Choice_Logprobs) Descriptor() ([]byte, []int) {
	return file_api_v1_inference_server_proto_rawDescGZIP(), []int{8, 0, 0}
}

func (x *Completion_Choice_Logprobs) GetTextOffset() int32 {
	if x != nil {
		return x.TextOffset
	}
	return 0
}

func (x *Completion_Choice_Logprobs) GetTokenLogprobs() float64 {
	if x != nil {
		return x.TokenLogprobs
	}
	return 0
}

func (x *Completion_Choice_Logprobs) GetTokens() string {
	if x != nil {
		return x.Tokens
	}
	return ""
}

func (x *Completion_Choice_Logprobs) GetTopLogprobs() float64 {
	if x != nil {
		return x.TopLogprobs
	}
	return 0
}

var File_api_v1_inference_server_proto protoreflect.FileDescriptor

var file_api_v1_inference_server_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x18, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x15, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6c, 0x6c, 0x6d, 0x61,
	0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x66, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x65,
	0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x63, 0x0a, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x74, 0x5f, 0x62,
	0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6c, 0x6c, 0x6d, 0x61,
	0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x6c, 0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f,
	0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f,
	0x70, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d,
	0x61, 0x78, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x12, 0x6d, 0x0a, 0x0f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x6c, 0x6c, 0x6d,
	0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x52, 0x0e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x65, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x6a, 0x0a, 0x0e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72,
	0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x20, 0x0a, 0x0b,
	0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x13,
	0x0a, 0x05, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74,
	0x6f, 0x70, 0x50, 0x12, 0x50, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x10, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x05,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x6e, 0x0a, 0x12, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63,
	0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x10, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x61,
	0x78, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6d, 0x61, 0x78, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x3f,
	0x0a, 0x1c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x74,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4b, 0x77, 0x61, 0x72, 0x67, 0x73, 0x1a,
	0x86, 0x08, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5f, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6c,
	0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x72, 0x6f, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x65, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72,
	0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0c, 0x74,
	0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x49, 0x64, 0x1a, 0xd9, 0x01,
	0x0a, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6b,
	0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4f, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x08, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x8c, 0x04, 0x0a, 0x07, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x6b, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x71, 0x0a, 0x0b, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x50, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x75, 0x64, 0x69,
	0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x6b, 0x0a,
	0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4e, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x72, 0x6c,
	0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x72, 0x6c, 0x1a, 0x34, 0x0a, 0x08, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x1a, 0x38, 0x0a, 0x0a, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x1a, 0x1c, 0x0a, 0x08, 0x41, 0x75,
	0x64, 0x69, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0xa7, 0x01, 0x0a, 0x0a, 0x54, 0x6f, 0x6f,
	0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x65, 0x0a, 0x08, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x49, 0x2e,
	0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x1e, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x1a, 0x24, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xec, 0x01, 0x0a, 0x04, 0x54, 0x6f, 0x6f,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x5f, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69,
	0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54,
	0x6f, 0x6f, 0x6c, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x6f, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x34, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x3c, 0x0a,
	0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb5, 0x01, 0x0a, 0x08,
	0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61,
	0x6c, 0x6c, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xd2, 0x02, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73,
	0x12, 0x44, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x70, 0x72, 0x6f, 0x62, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0xff, 0x01, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x70,
	0x72, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x70, 0x72,
	0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x59, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f,
	0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f,
	0x62, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x6f, 0x70, 0x4c, 0x6f,
	0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x70, 0x72,
	0x6f, 0x62, 0x73, 0x1a, 0x53, 0x0a, 0x0b, 0x54, 0x6f, 0x70, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f,
	0x62, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x70,
	0x72, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x70, 0x72,
	0x6f, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x7c, 0x0a, 0x05, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0xee, 0x04, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x07, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6c, 0x6c, 0x6d,
	0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x6c, 0x6d,
	0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0xd2, 0x02, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x51, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6c, 0x6c, 0x6d, 0x61,
	0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6c,
	0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62,
	0x73, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x1a, 0x7a, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x41, 0x0a, 0x0a, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61,
	0x6c, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x22, 0xf0, 0x06, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x4e, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12,
	0x2d, 0x0a, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65,
	0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xca, 0x04,
	0x0a, 0x06, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69,
	0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x52, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x3e, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69,
	0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x52, 0x08, 0x6c, 0x6f, 0x67,
	0x70, 0x72, 0x6f, 0x62, 0x73, 0x1a, 0xf2, 0x02, 0x0a, 0x05, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x0a, 0x74, 0x6f, 0x6f,
	0x6c, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x2e, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61,
	0x6c, 0x6c, 0x52, 0x09, 0x74, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c,
	0x65, 0x1a, 0xd6, 0x01, 0x0a, 0x08, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x68, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x74, 0x61,
	0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3c, 0x0a, 0x08,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x39, 0x0a, 0x0b, 0x52, 0x61,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x76, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x9f, 0x06, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x62, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x62, 0x65, 0x73, 0x74, 0x4f, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x63, 0x68, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x65, 0x63, 0x68, 0x6f, 0x12, 0x2b, 0x0a, 0x11,
	0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x79, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x5f, 0x0a, 0x0a, 0x6c, 0x6f, 0x67,
	0x69, 0x74, 0x5f, 0x62, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e,
	0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x09, 0x6c, 0x6f, 0x67, 0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6c, 0x6f,
	0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x65, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x65,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x63,
	0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65,
	0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2c, 0x0a,
	0x12, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x65, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x5f, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x6f, 0x70, 0x50,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x1a, 0x33, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x3c, 0x0a, 0x0e, 0x4c, 0x6f, 0x67,
	0x69, 0x74, 0x42, 0x69, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcd, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x45, 0x0a, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69,
	0x6e, 0x65, 0x72, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2d, 0x0a,
	0x12, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xb9, 0x02, 0x0a, 0x06,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x50, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x70, 0x72,
	0x6f, 0x62, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x8d, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x70,
	0x72, 0x6f, 0x62, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c,
	0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x6f, 0x67, 0x70,
	0x72, 0x6f, 0x62, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x70, 0x4c,
	0x6f, 0x67, 0x70, 0x72, 0x6f, 0x62, 0x73, 0x32, 0x0d, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x6c, 0x6d, 0x61, 0x72, 0x69, 0x6e, 0x65, 0x72, 0x2f, 0x69,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_inference_server_proto_rawDescOnce sync.Once
	file_api_v1_inference_server_proto_rawDescData = file_api_v1_inference_server_proto_rawDesc
)

func file_api_v1_inference_server_proto_rawDescGZIP() []byte {
	file_api_v1_inference_server_proto_rawDescOnce.Do(func() {
		file_api_v1_inference_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_inference_server_proto_rawDescData)
	})
	return file_api_v1_inference_server_proto_rawDescData
}

var file_api_v1_inference_server_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_api_v1_inference_server_proto_goTypes = []interface{}{
	(*CreateChatCompletionRequest)(nil),                // 0: llmariner.chat.server.v1.CreateChatCompletionRequest
	(*ToolCall)(nil),                                   // 1: llmariner.chat.server.v1.ToolCall
	(*Logprobs)(nil),                                   // 2: llmariner.chat.server.v1.Logprobs
	(*Usage)(nil),                                      // 3: llmariner.chat.server.v1.Usage
	(*ChatCompletion)(nil),                             // 4: llmariner.chat.server.v1.ChatCompletion
	(*ChatCompletionChunk)(nil),                        // 5: llmariner.chat.server.v1.ChatCompletionChunk
	(*RagFunction)(nil),                                // 6: llmariner.chat.server.v1.RagFunction
	(*CreateCompletionRequest)(nil),                    // 7: llmariner.chat.server.v1.CreateCompletionRequest
	(*Completion)(nil),                                 // 8: llmariner.chat.server.v1.Completion
	(*CreateChatCompletionRequest_Message)(nil),        // 9: llmariner.chat.server.v1.CreateChatCompletionRequest.Message
	(*CreateChatCompletionRequest_ToolChoice)(nil),     // 10: llmariner.chat.server.v1.CreateChatCompletionRequest.ToolChoice
	(*CreateChatCompletionRequest_ResponseFormat)(nil), // 11: llmariner.chat.server.v1.CreateChatCompletionRequest.ResponseFormat
	(*CreateChatCompletionRequest_Tool)(nil),           // 12: llmariner.chat.server.v1.CreateChatCompletionRequest.Tool
	(*CreateChatCompletionRequest_StreamOptions)(nil),  // 13: llmariner.chat.server.v1.CreateChatCompletionRequest.StreamOptions
	nil, // 14: llmariner.chat.server.v1.CreateChatCompletionRequest.LogitBiasEntry
	(*CreateChatCompletionRequest_Message_ToolCall)(nil),           // 15: llmariner.chat.server.v1.CreateChatCompletionRequest.Message.ToolCall
	(*CreateChatCompletionRequest_Message_Content)(nil),            // 16: llmariner.chat.server.v1.CreateChatCompletionRequest.Message.Content
	(*CreateChatCompletionRequest_Message_ToolCall_Function)(nil),  // 17: llmariner.chat.server.v1.CreateChatCompletionRequest.Message.ToolCall.Function
	(*CreateChatCompletionRequest_Message_Content_ImageUrl)(nil),   // 18: llmariner.chat.server.v1.CreateChatCompletionRequest.Message.Content.ImageUrl
	(*CreateChatCompletionRequest_Message_Content_InputAudio)(nil), // 19: llmariner.chat.server.v1.CreateChatCompletionRequest.Message.Content.InputAudio
	(*CreateChatCompletionRequest_Message_Content_AudioUrl)(nil),   // 20: llmariner.chat.server.v1.CreateChatCompletionRequest.Message.Content.AudioUrl
	(*CreateChatCompletionRequest_ToolChoice_Function)(nil),        // 21: llmariner.chat.server.v1.CreateChatCompletionRequest.ToolChoice.Function
	(*CreateChatCompletionRequest_Tool_Function)(nil),              // 22: llmariner.chat.server.v1.CreateChatCompletionRequest.Tool.Function
	(*ToolCall_Function)(nil),                                      // 23: llmariner.chat.server.v1.ToolCall.Function
	(*Logprobs_Content)(nil),                                       // 24: llmariner.chat.server.v1.Logprobs.Content
	(*Logprobs_Content_TopLogprobs)(nil),                           // 25: llmariner.chat.server.v1.Logprobs.Content.TopLogprobs
	(*ChatCompletion_Choice)(nil),                                  // 26: llmariner.chat.server.v1.ChatCompletion.Choice
	(*ChatCompletion_Choice_Message)(nil),                          // 27: llmariner.chat.server.v1.ChatCompletion.Choice.Message
	(*ChatCompletionChunk_Choice)(nil),                             // 28: llmariner.chat.server.v1.ChatCompletionChunk.Choice
	(*ChatCompletionChunk_Choice_Delta)(nil),                       // 29: llmariner.chat.server.v1.ChatCompletionChunk.Choice.Delta
	(*ChatCompletionChunk_Choice_Delta_ToolCall)(nil),              // 30: llmariner.chat.server.v1.ChatCompletionChunk.Choice.Delta.ToolCall
	(*ChatCompletionChunk_Choice_Delta_ToolCall_Function)(nil),     // 31: llmariner.chat.server.v1.ChatCompletionChunk.Choice.Delta.ToolCall.Function
	(*CreateCompletionRequest_StreamOption)(nil),                   // 32: llmariner.chat.server.v1.CreateCompletionRequest.StreamOption
	nil,                                // 33: llmariner.chat.server.v1.CreateCompletionRequest.LogitBiasEntry
	(*Completion_Choice)(nil),          // 34: llmariner.chat.server.v1.Completion.Choice
	(*Completion_Choice_Logprobs)(nil), // 35: llmariner.chat.server.v1.Completion.Choice.Logprobs
}
var file_api_v1_inference_server_proto_depIdxs = []int32{
	9,  // 0: llmariner.chat.server.v1.CreateChatCompletionRequest.messages:type_name -> llmariner.chat.server.v1.CreateChatCompletionRequest.Message
	14, // 1: llmariner.chat.server.v1.CreateChatCompletionRequest.logit_bias:type_name -> llmariner.chat.server.v1.CreateChatCompletionRequest.LogitBiasEntry
	11, // 2: llmariner.chat.server.v1.CreateChatCompletionRequest.response_format:type_name -> llmariner.chat.server.v1.CreateChatCompletionRequest.ResponseFormat
	13, // 3: llmariner.chat.server.v1.CreateChatCompletionRequest.stream_options:type_name -> llmariner.chat.server.v1.CreateChatCompletionRequest.StreamOptions
	12, // 4: llmariner.chat.server.v1.CreateChatCompletionRequest.tools:type_name -> llmariner.chat.server.v1.CreateChatCompletionRequest.Tool
	10, // 5: llmariner.chat.server.v1.CreateChatCompletionRequest.tool_choice_object:type_name -> llmariner.chat.server.v1.CreateChatCompletionRequest.ToolChoice
	23, // 6: llmariner.chat.server.v1.ToolCall.function:type_name -> llmariner.chat.server.v1.ToolCall.Function
	24, // 7: llmariner.chat.server.v1.Logprobs.content:type_name -> llmariner.chat.server.v1.Logprobs.Content
	26, // 8: llmariner.chat.server.v1.ChatCompletion.choices:type_name -> llmariner.chat.server.v1.ChatCompletion.Choice
	3,  // 9: llmariner.chat.server.v1.ChatCompletion.usage:type_name -> llmariner.chat.server.v1.Usage
	28, // 10: llmariner.chat.server.v1.ChatCompletionChunk.choices:type_name -> llmariner.chat.server.v1.ChatCompletionChunk.Choice
	3,  // 11: llmariner.chat.server.v1.ChatCompletionChunk.usage:type_name -> llmariner.chat.server.v1.Usage
	33, // 12: llmariner.chat.server.v1.CreateCompletionRequest.logit_bias:type_name -> llmariner.chat.server.v1.CreateCompletionRequest.LogitBiasEntry
	32, // 13: llmariner.chat.server.v1.CreateCompletionRequest.stream_option:type_name -> llmariner.chat.server.v1.CreateCompletionRequest.StreamOption
	34, // 14: llmariner.chat.server.v1.Completion.choices:type_name -> llmariner.chat.server.v1.Completion.Choice
	3,  // 15: llmariner.chat.server.v1.Completion.usage:type_name -> llmariner.chat.server.v1.Usage
	16, // 16: llmariner.chat.server.v1.CreateChatCompletionRequest.Message.content:type_name -> llmariner.chat.server.v1.CreateChatCompletionRequest.Message.Content
	15, // 17: llmariner.chat.server.v1.CreateChatCompletionRequest.Message.tool_calls:type_name -> llmariner.chat.server.v1.CreateChatCompletionRequest.Message.ToolCall
	21, // 18: llmariner.chat.server.v1.CreateChatCompletionRequest.ToolChoice.function:type_name -> llmariner.chat.server.v1.CreateChatCompletionRequest.ToolChoice.Function
	22, // 19: llmariner.chat.server.v1.CreateChatCompletionRequest.Tool.function:type_name -> llmariner.chat.server.v1.CreateChatCompletionRequest.Tool.Function
	17, // 20: llmariner.chat.server.v1.CreateChatCompletionRequest.Message.ToolCall.function:type_name -> llmariner.chat.server.v1.CreateChatCompletionRequest.Message.ToolCall.Function
	18, // 21: llmariner.chat.server.v1.CreateChatCompletionRequest.Message.Content.image_url:type_name -> llmariner.chat.server.v1.CreateChatCompletionRequest.Message.Content.ImageUrl
	19, // 22: llmariner.chat.server.v1.CreateChatCompletionRequest.Message.Content.input_audio:type_name -> llmariner.chat.server.v1.CreateChatCompletionRequest.Message.Content.InputAudio
	20, // 23: llmariner.chat.server.v1.CreateChatCompletionRequest.Message.Content.audio_url:type_name -> llmariner.chat.server.v1.CreateChatCompletionRequest.Message.Content.AudioUrl
	25, // 24: llmariner.chat.server.v1.Logprobs.Content.top_logprobs:type_name -> llmariner.chat.server.v1.Logprobs.Content.TopLogprobs
	27, // 25: llmariner.chat.server.v1.ChatCompletion.Choice.message:type_name -> llmariner.chat.server.v1.ChatCompletion.Choice.Message
	2,  // 26: llmariner.chat.server.v1.ChatCompletion.Choice.logprobs:type_name -> llmariner.chat.server.v1.Logprobs
	1,  // 27: llmariner.chat.server.v1.ChatCompletion.Choice.Message.tool_calls:type_name -> llmariner.chat.server.v1.ToolCall
	29, // 28: llmariner.chat.server.v1.ChatCompletionChunk.Choice.delta:type_name -> llmariner.chat.server.v1.ChatCompletionChunk.Choice.Delta
	2,  // 29: llmariner.chat.server.v1.ChatCompletionChunk.Choice.logprobs:type_name -> llmariner.chat.server.v1.Logprobs
	30, // 30: llmariner.chat.server.v1.ChatCompletionChunk.Choice.Delta.tool_calls:type_name -> llmariner.chat.server.v1.ChatCompletionChunk.Choice.Delta.ToolCall
	31, // 31: llmariner.chat.server.v1.ChatCompletionChunk.Choice.Delta.ToolCall.function:type_name -> llmariner.chat.server.v1.ChatCompletionChunk.Choice.Delta.ToolCall.Function
	35, // 32: llmariner.chat.server.v1.Completion.Choice.logprobs:type_name -> llmariner.chat.server.v1.Completion.Choice.Logprobs
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_api_v1_inference_server_proto_init() }
func file_api_v1_inference_server_proto_init() {
	if File_api_v1_inference_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_inference_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logprobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Usage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RagFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompletionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Completion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionRequest_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionRequest_ToolChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionRequest_ResponseFormat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionRequest_Tool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionRequest_StreamOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionRequest_Message_ToolCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionRequest_Message_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionRequest_Message_ToolCall_Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionRequest_Message_Content_ImageUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionRequest_Message_Content_InputAudio); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionRequest_Message_Content_AudioUrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionRequest_ToolChoice_Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateChatCompletionRequest_Tool_Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ToolCall_Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logprobs_Content); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Logprobs_Content_TopLogprobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletion_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletion_Choice_Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionChunk_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionChunk_Choice_Delta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionChunk_Choice_Delta_ToolCall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatCompletionChunk_Choice_Delta_ToolCall_Function); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCompletionRequest_StreamOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Completion_Choice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_inference_server_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Completion_Choice_Logprobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_inference_server_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1_inference_server_proto_goTypes,
		DependencyIndexes: file_api_v1_inference_server_proto_depIdxs,
		MessageInfos:      file_api_v1_inference_server_proto_msgTypes,
	}.Build()
	File_api_v1_inference_server_proto = out.File
	file_api_v1_inference_server_proto_rawDesc = nil
	file_api_v1_inference_server_proto_goTypes = nil
	file_api_v1_inference_server_proto_depIdxs = nil
}
